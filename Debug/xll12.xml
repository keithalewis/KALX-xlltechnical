<?xml version="1.0"?>
<doc>
    <assembly>
        "xll12"
    </assembly>
    <members>
        <member name="M:xll.AddIn.#ctor(xll.Args!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Register and Unregister an add-in when Excel calls xlAutoOpen and xlAutoClose.
</member>
        <member name="T:xll.AddIn">
Manage the lifecycle of an Excel add-in.
</member>
        <member name="M:xll.Arguments(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System">
Array appropriate for xlfRegister.
Use like <c>Excelv(xlfRegister, Arguments(...))</c></member>
        <member name="M:xll.Args.Unregister">
Unregister and add-in function or macro
</member>
        <member name="M:xll.Args.Register">
Register an add-in function or macro
</member>
        <member name="M:xll.Args.Num(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
Convenience function for number types.
</member>
        <member name="M:xll.Args.Threadsafe">
Argument modifiers
</member>
        <member name="M:xll.Args.Arg(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
Add an individual argument.
</member>
        <member name="M:xll.Args.ArgumentHelp(System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*)">
Specify individual argument help in the Function Wizard.
</member>
        <member name="M:xll.Args.FunctionHelp(System.Char!System.Runtime.CompilerServices.IsConst*)">
Specify the function help displayed in the Functinon Wizard.
</member>
        <member name="M:xll.Args.HelpTopic(System.Char!System.Runtime.CompilerServices.IsConst*)">
Specify the help topic to be used in the Function Wizard.
This must have the format...
</member>
        <member name="M:xll.Args.ShortcutText(System.Char)">
Specify the shortcut text for calling the function.
</member>
        <member name="M:xll.Args.Category(System.Char!System.Runtime.CompilerServices.IsConst*)">
Set the category to be used in the function wizard.
</member>
        <member name="M:xll.Args.Hidden">
Hide the name of the function from Excel.
</member>
        <member name="M:xll.Args.MacroType(System.Int32)">
Specify the macro type of the function.
Use 1 for functions, 2 for macros, and 0 for hidden functions. 
</member>
        <member name="M:xll.Args.FunctionText(System.Char!System.Runtime.CompilerServices.IsConst*)">
Specify the name of the function or macro to be used by Excel.
</member>
        <member name="M:xll.Args.TypeText(System.Char!System.Runtime.CompilerServices.IsConst*)">
Specify the return type and argument types of the function.
</member>
        <member name="M:xll.Args.Procedure(System.Char!System.Runtime.CompilerServices.IsConst*)">
Set the name of the C/C++ function to be called.
</member>
        <member name="M:xll.Args.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
Function
</member>
        <member name="M:xll.Args.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
Macro
</member>
        <member name="M:xll.Args.#ctor">
Common default.
</member>
        <member name="M:xll.Args.op_Implicit~xll.OPER12!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced">
For use as Excelv(xlfRegister, Args(....))
</member>
        <member name="M:xll.Args.Arity">
            <summary>Number of function arguments</summary>
        </member>
        <member name="M:xll.Args.Arity(xll.OPER12!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Number of function arguments</summary>
Detect the number of arguments based on the text type of a function.
</member>
        <member name="M:xll.Args.XlGetName">
Name of Excel add-in
</member>
        <member name="T:xll.Args">
            <summary>Prepare an array suitible for <c>xlfRegister</c></summary>
        </member>
        <member name="T:xll.ARG">
See https://msdn.microsoft.com/en-us/library/office/bb687900.aspx
</member>
        <member name="M:xll.OPER12.append(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
 Append a string
</member>
        <member name="T:xll.OPER12">
            <summary>
Value type that represents an Excel cell or range.
</summary>
        </member>
        <member name="M:xll.move(xll.REF12,System.Int32,System.Int32)">
Return a reference translated by <c>rw</c> and <c>col</c>.
</member>
        <member name="M:xll.REF12.move(System.Int32,System.Int32)">
Translate a reference by rw, col
</member>
        <member name="M:xll.REF12.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
Construct a reference to a two dimensional range.
</member>
        <member name="T:xll.REF12">
            <summary>
Wrapper for XLREF12 class
</summary>
The <c>XLREF12</c> class represents a reference to a two dimensional
range of cells.
<remarks>
The constructor uses <c>height</c> and <c>width</c> instead of <c>rw/colLast</c></remarks></member>
        <member name="M:XLL_INFO(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
OKCANCEL message box. Cancel turns off info bit
</member>
        <member name="M:XLL_WARNING(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
OKCANCEL message box. Cancel turns off warning bit
</member>
        <member name="M:XLL_ERROR(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
OKCANCEL message box. Cancel turns off error bit
</member>
        <member name="M:XLL_ALERT_LEVEL(System.UInt32!System.Runtime.CompilerServices.IsLong)">
Set error level and return old
</member>
    </members>
</doc>